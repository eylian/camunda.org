<section id="testing">

<div class="page-header">
      <h1>Testing</h1>
</div>
  
<div class="row-fluid">
  <div class="span9">
      <p>
        When testing Process Applications you first have to be clear on what scope you want to test. Often Process Applications orchestrate various existing services meaning a Process Application tests quickly becomes an integration test. Th following picture show the scopes we differntiate when testing Process Applications:
      </p>
      
      <img src="<%= @docUrl('assets/img/implementation-java/testing.scopes.png') %>" />

      <ol>
          <li>Testing process definitions only, as isolated as possible.</li>
          <li>Testing your process application including e.g. CDI or EJB beans.</li>
          <li>Integration testing of your applications with other deployments or services (maybe deployed as mock services) on your application server.</li>
          <li>End-to-end integration test including all external systems.</li>
      </ol>
      <p>
        See <a href="https://app.camunda.com/confluence/display/foxUserGuide/Test+Types+and+Scopes"> for more information on this.</a>
      </p>


    </div>
    <div class="span3">
      <h3>On this page</h3>
      <ul>            
          <li>Test Types</li>
          <li>Unit Testing</li>
          <li>Using Mocks to test your Process Applicaion</li>
          <li>Using Arquillian to test your Process Applicaion</li>
      </ul>
      <h3>There's more...</h3>
      <ul>            
          <li><a href="https://app.camunda.com/confluence/display/foxUserGuide/Test+Types+and+Scopes">Test Types and Scopes</a></li>
      </ul>      
    </div>
</div>
  





<h1>Unit Testing</h1>
<p>
Business processes are an integral part of software projects and they should be tested in the same way normal application logic is tested: with unit tests. Since the camunda engine is an embeddable Java engine, writing unit tests for business processes is as simple as writing regular unit tests.
</p>
<p>
camunda supports both JUnit versions 3 and 4 styles of unit testing. In the JUnit 3 style, the <a href="http://www.camunda.org/javadocs/org/camunda/bpm/engine/test/ProcessEngineTestCase.html">ProcessEngineTestCase</a> must be extended. This will make the ProcessEngine and the services available through protected member fields. In the setup() of the test, the processEngine will be initialized by default with the activiti.cfg.xml resource on the classpath. To specify a different configuration file, override the getConfigurationResource() method. Process engines are cached statically over multiple unit tests when the configuration resource is the same.
</p>
<p>
By extending ProcessEngineTestCase, you can annotate test methods with <a href="http://www.camunda.org/javadocs/org/camunda/bpm/engine/test/Deployment.html">Deployment</a>. Before the test is run, a resource file of the form testClassName.testMethod.bpmn20.xml in the same package as the test class, will be deployed. At the end of the test, the deployment will be deleted, including all related process instances, tasks, etc. The Deployment annotation also supports setting the resource location explicitly. See the Javadocs for more details.
</p>
<p>
Taking all that in account, a JUnit 3 style test looks as follows.
</p>

    
<div class="app-source" app-source-no-tabs="test1"></div>
<script type="text/xml" id="test1">   
public 
class MyBusinessProcessTest extends ProcessEngineTestCase {
   
  @Deployment
  public void testSimpleProcess() {
    runtimeService.startProcessInstanceByKey("simpleProcess");
    
    Task task = taskService.createTaskQuery().singleResult();
    assertEquals("My Task", task.getName());
    
    taskService.complete(task.getId());
    assertEquals(0, runtimeService.createProcessInstanceQuery().count());
  }
}      
</script>

<p>
To get the same functionality when using the JUnit 4 style of writing unit tests, the <a href="http://www.camunda.org/javadocs/org/camunda/bpm/engine/test/ProcessEngineRule.html">ProcessEngineRule</a> Rule must be used. Through this rule, the process engine and services are available through getters. As with the ProcessEngineTestCase (see above), including this Rule will enable the use of the Deployment annotation (see above for an explanation of its use and configuration) and it will look for the default configuration file on the classpath. Process engines are statically cached over multiple unit tests when using the same configuration resource.
</p>
<p>
The following code snippet shows an example of using the JUnit 4 style of testing and the usage of the ProcessEngineRule.
</p>


<div class="app-source" app-source-no-tabs="test2"></div>
<script type="text/xml" id="test2">   
public class MyBusinessProcessTest {
  
  @Rule
  public ProcessEngineRule processEngineRule = new ProcessEngineRule();
  
  @Test
  @Deployment
  public void ruleUsageExample() {
    RuntimeService runtimeService = processEngineRule.getRuntimeService();
    runtimeService.startProcessInstanceByKey("ruleUsage");
    
    TaskService taskService = processEngineRule.getTaskService();
    Task task = taskService.createTaskQuery().singleResult();
    assertEquals("My Task", task.getName());
    
    taskService.complete(task.getId());
    assertEquals(0, runtimeService.createProcessInstanceQuery().count());
  }
}
</script>      




<h2>Debugging unit tests</h2>
<p>
When using the in-memory H2 database for unit tests, the following instructions allow to easily inspect the data in the engine database during a debugging session. The screenshots here are taken in Eclipse, but the mechanism should be similar for other IDEs.
</p>

<p>
Suppose we have put a breakpoint somewhere in our unit test. In Eclipse this is done by double-clicking in the left border next to the code:
</p>
<img src="<%= @docUrl('assets/img/implementation-java/api.test.debug.breakpoint.png') %>">

<p>
If we now run the unit test in debug mode (right-click in test class, select 'Run as' and then 'JUnit test'), the test execution halts at our breakpoint, where we can now inspect the variables of our test as shown in the right upper panel.
</p>
<img src=""<%= @docUrl('assets/img/implementation-java/api.test.debug.view.png') %>">

<p>
To inspect the data, open up the 'Display' window (if this window isn't there, open Window->Show View->Other and select Display.) and type (code completion is available) org.h2.tools.Server.createWebServer("-web").start()
</p>
<img src=""<%= @docUrl('assets/img/implementation-java/api.test.debug.start.h2.server.png') %>">

<p>
Select the line you've just typed and right-click on it. Now select 'Display' (or execute the shortcut instead of right-clicking)
</p>
<img src=""<%= @docUrl('assets/img/implementation-java/api.test.debug.start.h2.server.2.png') %>">

<p>
Now open up a browser and go to <a href="http://localhost:8082">http://localhost:8082</a>, and fill in the JDBC URL to the in-memory database (by default this is jdbc:h2:mem:activiti), and hit the connect button.
</p>
<img src=""<%= @docUrl('assets/img/implementation-java/api.test.debug.h2.login.png') %>">

<p>
You can now see the engine database and use it to understand how and why your unit test is executing your process in a certain way.
</p>
<img src=""<%= @docUrl('assets/img/implementation-java/api.test.debug.h2.tables.png') %>">
  








<h1>Using Mocks to test your Process Application</h1>
<p>
 See <a href="https://app.camunda.com/confluence/display/foxUserGuide/Using+Mocks+to+test+your+Process+Application">Using Mocks to test your Process Application</a>
</p>
	



<h1>Using Arquillian to test your Process Applicaion</h1>
<p>
   In Java EE environments we recently use JBoss Arquillian pretty often to test Process Applications, because it makes bootstrapping the engine pretty simple. We will add more documentation on this here soon - for the moment please refer to the <a href="http://arquillian.org/guides/getting_started_de/">Arquillian Getting Started Guide</a>.
</p>
</section>