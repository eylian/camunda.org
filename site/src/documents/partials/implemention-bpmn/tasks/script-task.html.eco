<section id="script-task">

  <div class="page-header">
      <h1>Script Task</h1>
  </div>
  
  <div class="row-fluid">
  <div class="span9">
      <p>A script task is an automatic activity. When a process execution arrives at the script task, the corresponding script is executed.</p>

      <div data-bpmn-symbol="scripttask"  data-bpmn-symbol-name="Script Task"> </div>

      <p>
        A script task is defined by specifying the script and the scriptFormat.
      </p>

<div class="app-source" app-source-no-tabs="script1" ></div>
<script type="text/xml" id="script1">
<scriptTask id="theScriptTask" name="Execute script" scriptFormat="groovy">
  <script>
    sum = 0
    for ( i in inputArray ) {
      sum += i
    }
  </script>
</scriptTask>
</script>

      <p>
      The value of the scriptFormat attribute must be a name that is compatible with the JSR-223 (scripting for the Java platform). If you want to use a (JSR-223 compatible) scripting engine, it is necessary to add the corresponding jar to the classpath and use the appropriate name.
      </p>

    </div>
    <div class="span3">
      <h3>On this page</h3>
      <ul>            
          <li>Script Tasks</li>
          <li>Variables in Scripts</li>
          <li>Script results</li>          
      </ul>
      <h3>There's more...</h3>
      <ul>            
          <li><a href="<%= @docUrl('design/reference.html') %>#!/activities/tasks">Tasks in the BPMN Tutorial</a></li>
      </ul>      
    </div>
  </div>
  
  
<h2>Variables in scripts</h2>
<p>
  All process variables that are accessible through the execution that arrives in the script task, can be used within the script. In the example, the script variable 'inputArray' is in fact a process variable (an array of integers).
</p>

<div class="app-source" app-source-no-tabs="script2"></div>
<script type="text/xml" id="script2">   
<script>
    sum = 0
    for ( i in inputArray ) {
      sum += i
    }
</script>
</script>

<p>
It's also possible to set process variables in a script, simply by using an assignment statement. In the example above, the 'sum' variable will be stored as a process variable after the script task has been executed. To avoid this behavior, script-local variables can be used. In Groovy, the keyword 'def' must then be used: 'def sum = 0'. In that case, no process variable will be stored.
</p>
<p>
An alternative is to set variables through the current execution, which is available as a reserved variable called 'execution'.
</p>

<div class="app-source" app-source-no-tabs="script3"></div>
<script type="text/xml" id="script3">
<script>
    def scriptVar = "test123"
    execution.setVariable("myVar", scriptVar)
</script>    
</script>
  

<p>
Note: the following names are reserved and cannot be used as variable names: out, out:print, lang:import, context, elcontext.
</p>







<h2>Script results</h2>
<p>
The return value of a script task can be assigned to an already existing or to a new process variable by specifying the process variable name as a literal value for the 'activiti:resultVariable' attribute of a script task definition. Any existing value for a specific process variable will be overwritten by the result value of the script execution. When not specifying a result variable name, the script result value gets ignored.
</p>

<div class="app-source" app-source-no-tabs="script4"></div>
<script type="text/xml" id="script4">
<scriptTask id="theScriptTask" name="Execute script" scriptFormat="juel" activiti:resultVariable="myVar">
  <script>#{echo}</script>
</scriptTask>    
</script>
    

<p>
  In the above example, the result of the script execution (the value of the resolved expression '#{echo}') is set to the process variable named 'myVar' after the script completes. 
</p>
  
</section>