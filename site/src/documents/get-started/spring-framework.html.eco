---

title: 'Get started | With camunda BPM and the Spring framework'
layout: 'default'

---

<!-- customize modal for this page -->
<style type="text/css">
  .modal {
    width: 800px; /* SET THE WIDTH OF THE MODAL */
    margin: -250 auto; /* CHANGE MARGINS TO ACCOMODATE THE NEW WIDTH (original = margin: -250px 0 0 -280px;) */
  }
</style>

<div class="row headline">
  <h1>Getting Started</h1>
  <h3>With camunda BPM and the Spring Framework</h3>
</div>

<div class="row">
  <div id="navSide" class="span3 bs-docs-sidebar">
    <ul class="nav nav-list bs-docs-sidenav" data-ca-affix>
      <li><a href="#intro"><i class="icon-chevron-right"></i> What will you learn?</a></li>
      <li><a href="#setup"><i class="icon-chevron-right"></i> Setup your Project</a></li>
      <li><a href="#configure"><i class="icon-chevron-right"></i> Configure an Embedded Process Engine</a></li>
      <li><a href="#servicetask"><i class="icon-chevron-right"></i> Add a Spring Bean Service Task</a></li>
      <li><a href="#adapt"><i class="icon-chevron-right"></i> Use Shared Process Engine on camunda BPM Apache Tomcat</a></li>
    </ul>
  </div>

  <div class="span9">
    <section id="intro">
      <div class="page-header">
        <h1>What will you learn?</h1>              
      </div>

      This tutorial guides you through your first steps in using camunda BPM in a Spring Web application.
        
      <dl class="dl-horizontal">        
        <dt>Setup</dt>
        <dd>A Spring Web application project as an Apache Maven project.</dd>
        <dt>Configure</dt>
        <dd>The camunda process engine and embed it inside your application.</dd>
        <dt>Deploy</dt>
        <dd>Your project to a vanilla Apache Tomcat server.</dd>
        <dt>Add Spring Task</dt>
        <dd>Learn how to use UEL Expressions for resolving Spring Beans from the BPMN 2.0 process.</dd>
        <dt>Adapt</dt>
        <dd>Your project to use a Shared Process Engine and deploy it to the camunda BPM enhanced Tomcat server.</dd>
      </dl>
    </section>

    <div class="alert">
        <p>
          <strong>Before you start</strong> 
          In this tutorial we assume that you are familiar with the Basics of Java Web application development and the Spring Framework. We also assume that you have installed an eclipse distribution and the camunda modeler.
        </p>        
      </div>

    <section id="setup">
      <div class="page-header">
        <h1>Setup your Project</h1>
      </div>

      <p>
        We will start with setting up a Spring Web application as Apache Maven Project inside Eclipse. This consists of four steps:
        <ol>
          <li><a href="#setup/eclipse">Create a new Maven Project in Eclipse</a></li>
          <li><a href="#setup/maven">Add the camunda &amp; Spring framework dependencies</a></li>          
          <li><a href="#setup/web.xml">Add web.xml file for bootstrapping the Spring container</a></li>
          <li><a href="#setup/application-context">Add a Spring application context XML configuration file</a></li>
        </ol>
        In the following, we go through this process step by step.
      </p>

      <section id="setup/eclipse">
        <h3>Create a new Maven Project in Eclipse</h3>
        <div class="row">
            <div class="span2">
              <div class="thumbnail" data-img-thumb img-src="<%= @docUrl('assets/img/get-started/spring-framework/eclipse-new-project.png') %>" >
              </div>
            </div>
            <div class="span7">
               <p>
                First, we set up a new Apache Maven based project in eclipse. Let's call it <em>loanapproval-spring</em>. The screenshot on the left illustrates the settings we choose. Since we deploy a Web application, make sure to select <code>Packaging: war</code>.
              </p>              
              <p class="alert">
                If you are unfamiliar with setting up a Maven project, read the <em>Setup your Project</em> Section in the <a href="<%= @docUrl('get-started/developing-process-applications.html') %>">Getting started developing process applications</a> tutorial.
              </p>
              <p>
                When you are done, click Finish. Eclipse sets up a new Maven project. The project appears in the <em>Project Explorer</em> View.
              </p>
            </div>
          </div>
        </section> 

        <section id="setup/maven">
          <h3>Add camunda BPM &amp; Spring Framework dependencies</h3>
          <div class="row">
            <div class="span9">
              <p>
                The next step consists in setting up the Maven dependencies for the new project. Maven dependencies need to be added to the <code>pom.xml</code> file of the project. We add both camunda BPM and Spring Framework dependencies:
              </p>

              <div class="app-source" app-source-no-tabs="pom.xml" annotate="code-annotations" ></div>

              <p>
                Now you can perform the first build. Select the <code>pom.xml</code> in the Package Explorer, perform a Right Click and select <code>Run AS / Maven Install</code> 
              </p>
            </div>
          </div>
        </section> 

        <section id="setup/web.xml">
          <h3>Add web.xml file for bootstrapping the Spring container</h3>
          <div class="row">
            <div class="span9">
              <p>
                Next, we add a <code>web.xml</code> file for bootstrapping the spring container. In order to do so, first add a folder named <code>WEB-INF</code> to the (already existing) <code>src/main/webapp</code> folder of you Maven project. Inside this folder, add a file named <code>web.xml</code>:
              </p>

              <div class="app-source" app-source-no-tabs="web.xml" annotate="code-annotations" ></div>

            </div>
          </div>
        </section> 

        <section id="setup/application-context">
          <h3>Add a Spring application context XML configuration file</h3>
          <div class="row">
            <div class="span9">
              <p>
                Next, we add a Spring ApplicationContext XML file to the same <code>src/main/webapp/WEB-INF</code> folder. The file must be named <code>applicationContext.xml</code>. We start with an empty file:
              </p>

              <div class="app-source" app-source-no-tabs="applicationContext.xml" annotate="code-annotations" ></div>             
            </div>
          </div>
        </section> 

        <h3>Setup complete!</h3>
        <div class="row">
          <div class="span2">
            <div id="project-layout-after-setup" class="thumbnail" data-img-thumb img-src="<%= @docUrl('assets/img/get-started/spring-framework/project-layout-after-setup.png') %>" >
            </div>
          </div>
          <div class="span7">
            <p>
              Congratulation, you have completed the project setup. Your project should now look as depicted in the screenshot on the left.
            </p>      

            <p>
              You can now perform a full Maven build and deploy the project to a vanilla Apache Tomcat server. You should see the following log output:
            </p>
            <pre class="console">
28.04.2013 15:11:02 org.apache.catalina.startup.HostConfig deployWAR
INFO: Deploying web application archive C:\demo\apache-tomcat-7.0.39\webapps\loanapproval-spring-0.0.1-SNAPSHOT.war
28.04.2013 15:11:03 org.springframework.web.context.ContextLoader initWebApplicationContext
INFO: Root WebApplicationContext: initialization started
28.04.2013 15:11:03 org.springframework.context.support.AbstractApplicationContext prepareRefresh
INFO: Refreshing Root WebApplicationContext: startup date [Sun Apr 28 15:11:03 CEST 2013]; root of context hierarchy
28.04.2013 15:11:03 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from ServletContext resource [/WEB-INF/applicationContext.xml]
28.04.2013 15:11:03 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons
INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1a8dfb3: defining beans []; root of factory hierarchy
28.04.2013 15:11:03 org.springframework.web.context.ContextLoader initWebApplicationContext
INFO: Root WebApplicationContext: initialization completed in 170 ms
          </pre>

          <p>This means that you have setup your Spring web application correctly.</p>

        </div>
      </div>
            
    </section>
    <section id="configure">
      <div class="page-header">
        <h1>Configure an Embedded Process Engine</h1>
      </div>
      <p>
        Now that you have set up the project with the correct Maven dependencies, we can start configuring the process engine. Add the following Spring beans configuration to the <code>src/main/webapp/WEB-INF/applicationContext.xml</code> file:
      </p>

      <div class="app-source" app-source-no-tabs="embeddedEngine.xml" annotate="code-annotations" ></div>             

      <p>After you added these definitions to the Spring Application context, perform a full Maven build and redeploy the application. In the logfile of the Apache Tomcat server you should be able to see the initialization of the process-engine:</p>

      <pre class="console">
28.04.2013 15:33:04 org.camunda.bpm.engine.impl.db.DbSqlSession executeSchemaResource
INFO: performing create on engine with resource org/camunda/bpm/engine/db/create/activiti.h2.create.engine.sql
28.04.2013 15:33:04 org.camunda.bpm.engine.impl.db.DbSqlSession executeSchemaResource
INFO: performing create on history with resource org/camunda/bpm/engine/db/create/activiti.h2.create.history.sql
28.04.2013 15:33:04 org.camunda.bpm.engine.impl.db.DbSqlSession executeSchemaResource
INFO: performing create on identity with resource org/camunda/bpm/engine/db/create/activiti.h2.create.identity.sql
28.04.2013 15:33:04 org.camunda.bpm.engine.impl.ProcessEngineImpl <init>
INFO: ProcessEngine default created
      </pre>
    </section>

    <section id="servicetask">
      <div class="page-header">
        <h1>Add a Spring Bean Service Task</h1>
      </div>
      <p>
        Now that we know how to bootstrap the process engine in a Spring Application context, we can add a BPMN 2.0 process model and interact with the process form inside our Spring beans. In this section we will
        <ul>
          <li><a href="#servicetask/model">Model an executable BPMN 2.0 process.</a></li>
          <li><a href="#servicetask/deploy">Use Spring auto-deployment for BPMN 2.0 processes.</a></li>
          <li><a href="#servicetask/start">Start a process instance from a Spring bean.</a></li>
          <li><a href="#servicetask/invoke">Invoke a Spring bean from a BPMN 2.0 Service task.</a></li>
        </ul>
      </p>              
    </section>

    <section id="servicetask/model">
      <h3>Model an executable BPMN 2.0 process</h3>
      <div class="row">
        <div class="span2">
          <div class="thumbnail" id="process-model" data-img-thumb img-src="<%= @docUrl('assets/img/get-started/spring-framework/process-model.png') %>" >
          </div>
        </div>
        <div class="span7">
           <p>
            We start by modeling an executable process using the camunda modeler. The process should look as depicted in the screenshot on the left.
          </p>              
          <p class="alert">
            If you are unfamiliar with modeling an executable process, you can read the section named <em>Model a Process</em> in the <a href="<%= @docUrl('get-started/developing-process-applications.html') %>">Getting started developing process applications</a> tutorial.
          </p>
          <p>
            When you are done, save the process model.
          </p>
        </div>
      </div>
    </section>

    <section id="servicetask/deploy">
      <h3>Use Spring auto-deployment for BPMN 2.0 processes</h3>
      <div class="row">
        <div class="span9">
          <p>
            In order for the process to be deployed, we use the auto-deployment feature provided by the camunda engine Spring integration. In order to use this feature, modify the definition of the <code>processEngineConfiguration</code> bean inside your <code>src/main/webapp/WEB-INF/applicationContext.xml</code> file:
          </p>

          <div class="app-source" app-source-no-tabs="autodeployment" annotate="code-annotations" ></div>

          <p>
            If you redeploy the application, you should see the following message in the logfile, meaning that the process definition has been picked up and deployed:
          </p>
          <pre class="console">
INFO: ProcessEngine default created
28.04.2013 16:01:00 org.camunda.bpm.engine.impl.bpmn.deployer.BpmnDeployer deploy
INFO: Processing resource C:\demo\apache-tomcat-7.0.39\webapps\loanapproval-spring-0.0.1-SNAPSHOT\WEB-INF\classes\loanApproval.bpmn
28.04.2013 16:01:01 org.springframework.web.context.ContextLoader initWebApplicationContext
          </pre>
        </div>
      </div>

      <div class="accordion" id="accAutoDeployment">
        <div class="accordion-group">
          <div class="accordion-heading">
            <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accAutoDeployment" href="#accAutoDeploymentCollapsed"> <i class="icon-thumbs-up"></i> 
              Alternative: Auto-deployment using <code>META-INF/processes.xml</code>
            </a>
          </div>
          <div id="accAutoDeploymentCollapsed" class="accordion-body collapse">
            <div class="accordion-inner">
              <p>
                The <code>deploymentResources</code> provides basic auto-deployment features. If you need more control over the deployment process, you can use the processes.xml based deployment options in combination with a <code>SpringProcessApplication</code>. This feature works with both the Embedded Process Engine (as used in this tutorial) and a Shared Process Engine. In order to use <code>META-INF/processes.xml</code> based deployment, you must make the following changes to the application context file:                
              </p>   

              <div class="app-source" app-source-no-tabs="applicationContext-withSpringPa" annotate="code-annotations" ></div>                      

              <p>
                Now you can add a <code>META-INF/processes.xml</code> file:
              </p>

              <div class="app-source" app-source-no-tabs="processes.xml" annotate="code-annotations" ></div>                      

            </div>
          </div>
        </div>
      </div>

    </section> 

    <section id="servicetask/start">
      <h3>Start a process instance from a Spring bean</h3>
      <div class="row">
        <div class="span9">
          <p>
            The next step consists in starting a process instance from a Spring Bean. We will simply add a Spring Bean to the application context which injects the process engine and starts a single process instance from an <code>afterPropertiesSet()</code> Method:
          </p>

          <div class="app-source" app-source-no-tabs="starter-java" annotate="code-annotations" ></div>

          <p>
            We add the Spring bean to the applicationContext.xml file:
          </p>

          <div class="app-source" app-source-no-tabs="starter-xml" annotate="code-annotations" ></div>
          
        </div>
      </div>
    </section> 

    <section id="servicetask/invoke">
      <h3>Invoke a Spring bean from a BPMN 2.0 Service task</h3>
        <div class="row">
          <div class="span2">
            <div id="service-task" class="thumbnail" data-img-thumb img-src="<%= @docUrl('assets/img/get-started/spring-framework/service-task.png') %>" >
            </div>
          </div>
          <div class="span7">
            <p>
              Referencing a Spring Bean from a BPMN 2.0 Service Task is simple. As shown in the screenshot on the left, we have to select the service task in the camunda modeler and provide an expression in the <em>Expression Delegate</em> Field. We type <code>${calculateInterestService}</code>.
            </p>      
            
        </div>
      </div>

      <p>Finally we add the Java class implementing the <code>JavaDelegate</code> interface.</p>

      <div class="app-source" app-source-no-tabs="service-java" annotate="code-annotations" ></div>

      <p>And register it as a Spring Bean in the application context.</p>

      <div class="app-source" app-source-no-tabs="service-xml" annotate="code-annotations" ></div>

    </section> 

    <section id="done">
      <div class="page-header">
        <h1>You made it!</h1>
      </div>
      <div class="row">
        <div class="span9">
          <p>
             This marks the end of this tutorial. You have successfully set up a Spring Application with an embedded process engine. You can deploy this project to virtually any application server.      
          </p>
          <h3>Where to go from here?</h3>
          <ul>
            <li>
              <a href="http://docs.camunda.org/guides/user-guide/">Read the documentation about the camunda Spring integration in the userguide</a>
            </li>
            <li>
              <a href="http://docs.camunda.org/api-references/bpmn20/">Explore the BPMN 2.0 Implementation Reference</a>
            </li>     
            <li>Read the bonus chapter below about how to adapt the configuration of the application to deploy it to the camunda BPM Apache Tomcat.</li>       
          </ul>
        </div>
      </div>
    </section>

   <section id="adapt">
      <div class="page-header">
        <h1>Bonus Chapter: Use Shared Process Engine on camunda BPM Apache Tomcat</h1>
      </div>
      <p>
        In this tutorial we explored how to setup an embedded process engine inside a Web application using the Spring Framework. You can also use the Spring Framework for developing applications that use a Shared Process engine. As opposed to the Embedded Process engine, the Shared Process engine is controlled independently from an application and is started / stopped by the runtime container (like Apache Tomcat). This allows multiple applications (or a single modular application) to use the same process engine. You can also re-deploy individual applications independently from the process engine.
      </p>
      <p>
        In order to configure the loanapproval-spring example to work with an embedded process engine, you have to change three things:
      </p>
      
      <p>
        First, we need to set the scope of the Maven dependency of the camunda-engine dependency to <code>provided</code>. On the camunda BPM platform the process engine library is provided as a shared library and does not need to be bundled with the application:
      </p>      
      <div class="app-source" app-source-no-tabs="provided-engine" annotate="code-annotations" ></div>

      <p>
        Furthermore, you can delete the dependency <code>org.springframework:spring-jdbc</code>.
      </p>
      <p>  
        Second, you need to add a <code>META-INF/processes.xml</code> file to your application.
      </p>
      <div class="app-source" app-source-no-tabs="platform-processes.xml" annotate="code-annotations" ></div>

      <p>
        And third, the <code>applicationContext.xml</code> file is adjusted such that the shared process engine is looked up and a <code>SpringServletProcessApplication</code> is bootstrapped:
      </p>
      <div class="app-source" app-source-no-tabs="managed-engine-lookup" annotate="code-annotations" ></div>
        
      </p>
    </section>


  </div>

 

</div>


<!-- ==================================================================== -->
<!-- ============================ Code, Yo! ============================= -->

<div class="bootstrap-code">

<script type="text/xml" id="pom.xml">
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.camunda.bpm.example</groupId>
  <artifactId>loanapproval-spring</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>Loan approval Spring example</name>

  <properties>
    <camunda.version>7.0.0-alpha3</camunda.version>
    <spring.version>3.1.2.RELEASE</spring.version>
  </properties>

  <dependencies>  
    <dependency>
      <groupId>org.camunda.bpm</groupId>
      <artifactId>camunda-engine</artifactId>
      <version>${camunda.version}</version>
    </dependency>    
    <dependency>
      <groupId>org.camunda.bpm</groupId>
      <artifactId>camunda-engine-spring</artifactId>
      <version>${camunda.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>1.3.171</version>
    </dependency>
  </dependencies>

  <repositories>
    <!-- Spring Maven repository -->
    <repository>
      <id>springsource-repo</id>
      <name>SpringSource Repository</name>
      <url>http://repo.springsource.org/release</url>
    </repository>
    <!-- camunda Maven repository -->
    <repository>
      <id>camunda-bpm-nexus</id>
      <name>camunda-bpm-nexus</name>
      <url>https://app.camunda.com/nexus/content/groups/public</url>
    </repository>
  </repositories>

</project>
</script>


<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="web.xml">
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">

  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/applicationContext.xml</param-value>
  </context-param>

  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

</web-app>
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="applicationContext.xml">
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:activiti="http://www.activiti.org/schema/spring/components"
       xsi:schemaLocation="http://www.springframework.org/schema/beans   
                           http://www.springframework.org/schema/beans/spring-beans.xsd">
       
               
</beans>
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="embeddedEngine.xml">
<bean id="dataSource"
  class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
  <property name="targetDataSource">
    <bean class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
      <property name="driverClass" value="org.h2.Driver" />
      <property name="url"
        value="jdbc:h2:mem:process-engine;DB_CLOSE_DELAY=1000" />
      <property name="username" value="sa" />
      <property name="password" value="" />
    </bean>
  </property>
</bean>

<bean id="transactionManager"
  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  <property name="dataSource" ref="dataSource" />
</bean>

<bean id="processEngineConfiguration" class="org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration">
  <property name="processEngineName" value="engine" />
  <property name="dataSource" ref="dataSource" />
  <property name="transactionManager" ref="transactionManager" />
  <property name="databaseSchemaUpdate" value="true" />
  <property name="jobExecutorActivate" value="false" />
</bean>

<bean id="processEngine" class="org.camunda.bpm.engine.spring.ProcessEngineFactoryBean">
  <property name="processEngineConfiguration" ref="processEngineConfiguration" />
</bean>

<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="autodeployment">
<bean id="processEngineConfiguration" class="org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration">
  <property name="processEngineName" value="engine" />
  <property name="dataSource" ref="dataSource" />
  <property name="transactionManager" ref="transactionManager" />
  <property name="databaseSchemaUpdate" value="true" />
  <property name="jobExecutorActivate" value="false" />
  <property name="deploymentResources" value="classpath*:*.bpmn" /> 
</bean>
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="applicationContext-withSpringPa">
<bean id="processEngineConfiguration" class="org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration">
  <property name="processEngineName" value="engine" />
  <property name="dataSource" ref="dataSource" />
  <property name="transactionManager" ref="transactionManager" />
  <property name="databaseSchemaUpdate" value="true" />
  <property name="jobExecutorActivate" value="false" />
</bean>

<bean id="processEngine" class="org.camunda.bpm.engine.spring.container.ManagedProcessEngineFactoryBean">
  <property name="processEngineConfiguration" ref="processEngineConfiguration" />
</bean>

<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />

<bean id="processApplication" class="org.camunda.bpm.engine.spring.application.SpringServletProcessApplication" depends-on="processEngine" />
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="processes.xml">
<?xml version="1.0" encoding="UTF-8" ?>
 
<process-application
  xmlns="http://www.camunda.org/schema/1.0/ProcessApplication"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 
  <process-archive name="loan-approval">
    <process-engine>engine</process-engine>
    <properties>
      <property name="isDeleteUponUndeploy">false</property>
      <property name="isScanForProcessDefinitions">true</property>
    </properties>
  </process-archive>
 
</process-application>
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="starter-java">
public class Starter implements InitializingBean {
  
  @Autowired
  private RuntimeService runtimeService;

  public void afterPropertiesSet() throws Exception {
    runtimeService.startProcessInstanceByKey("loanApproval");   
  }
  
  public void setRuntimeService(RuntimeService runtimeService) {
    this.runtimeService = runtimeService;
  }
}

</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="starter-xml">
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans   
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-2.5.xsd" >

  ...
  
  <context:annotation-config />
        
  <bean class="org.camunda.bpm.example.loanapproval.Starter"  />

  ...

</beans>
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="starter-xml">
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans   
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-2.5.xsd" >
  ...
  <context:annotation-config />
  <bean class="org.camunda.bpm.example.loanapproval.Starter"  />
  ...
</beans>
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="service-java">
public class CalculateInterestService implements JavaDelegate {
  
  public void execute(DelegateExecution delegate) throws Exception {
    
    System.out.println("Spring Bean invoked.");
    
  }

}
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="service-xml">
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans   
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-2.5.xsd" >
  ...
  <context:annotation-config />
        
  <bean class="org.camunda.bpm.example.loanapproval.Starter"  />
  <bean id="calculateInterestService" class="org.camunda.bpm.example.loanapproval.CalculateInterestService"  />
  ...
</beans>
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="provided-engine">
<dependency>
  <groupId>org.camunda.bpm</groupId>
  <artifactId>camunda-engine</artifactId>
  <version>${camunda.version}</version>
  <scope>provided</scope>
</dependency>
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="managed-engine-lookup">
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans   
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-2.5.xsd" >

<!-- bind the process engine service as Spring Bean -->
<bean name="processEngineService" class="org.camunda.bpm.BpmPlatform" factory-method="getProcessEngineService" />

<!-- bind the default process engine as Spring Bean -->
<bean name="processEngine" factory-bean="processEngineService" factory-method="getDefaultProcessEngine" />

<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>
<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>
<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>

<!-- bootstrap the process application -->
<bean id="processApplication" class="org.camunda.bpm.engine.spring.application.SpringServletProcessApplication" />
      
<context:annotation-config />
      
<bean class="org.camunda.bpm.example.loanapproval.Starter"  />
<bean id="calculateInterestService" class="org.camunda.bpm.example.loanapproval.CalculateInterestService"  />
               
</beans>
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/xml" id="platform-processes.xml">
<?xml version="1.0" encoding="UTF-8" ?>
 
<process-application
  xmlns="http://www.camunda.org/schema/1.0/ProcessApplication"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 
  <process-archive name="loan-approval">
    <process-engine>default</process-engine>
    <properties>
      <property name="isDeleteUponUndeploy">false</property>
      <property name="isScanForProcessDefinitions">true</property>
    </properties>
  </process-archive>
 
</process-application>
</script>

<!-- ==================================================================== -->
<!-- ==================================================================== -->

<script type="text/ng-template" id="code-annotations">
{ 
 "pom.xml":
  { 
    "camunda-engine": "The process engine is the component responsible for picking up your BPMN 2.0 processes and executing them.",
    "camunda-engine-spring": "Spring framework integration module for the process engine.",
    "spring-web": "The Spring Web artifact declaratively pulls in the Spring core libraries.",
    "com.h2database": "we use an embedded H2 database for the process engine",
    "springsource-repo": "repository for Spring artifacts.",
    "camunda-bpm-nexus" : "camunda nexus providing the Maven artifacts."

  }, 
  "web.xml":
  {
    "contextConfigLocation": "location of Spring XML files",
    "ContextLoaderListener": "the listener that kick-starts Spring"    
  },
  "embeddedEngine.xml":
  {
    "dataSource": "Configuration of the dataSource to be used by the process engine. In this case we use an in-memory H2 database.",
    "processEngineConfiguration": "The process engine configuration bean allows configuration the process engine. In this case, the datasource and transaction manager properties are configured.",
    "ProcessEngineFactoryBean": "the Process Engine is created by a factory bean."    
  },
  "autodeployment": 
  {
    "classpath*:*.bpmn": "picks up all BPMN 2.0 files on the classpath and deploys them to the process engine."    
  },
  "applicationContext-withSpringPa":
  {
    "processApplication": "Defining a SpringServletProcessApplication makes sure the META-INF/processes.xml file is picked up.",
    "ManagedProcessEngineFactoryBean": "Alternative Process Engine Factory Bean which registers the process engine with the ProcessEngineService.",
    "\"engine\"": "the name of the process engine. Must be referenced in the META-INF/processes.xml file."
  }
}
</script>  



</div>
